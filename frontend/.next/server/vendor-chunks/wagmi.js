"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wagmi";
exports.ids = ["vendor-chunks/wagmi"];
exports.modules = {

/***/ "(ssr)/../node_modules/wagmi/dist/index.js":
/*!*******************************************!*\
  !*** ../node_modules/wagmi/dist/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainMismatchError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ChainMismatchError),\n/* harmony export */   ChainNotConfiguredError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ChainNotConfiguredError),\n/* harmony export */   ConfigChainsNotFound: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ConfigChainsNotFound),\n/* harmony export */   Connector: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_15__.Connector),\n/* harmony export */   ConnectorAlreadyConnectedError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ConnectorAlreadyConnectedError),\n/* harmony export */   ConnectorNotFoundError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_16__.ConnectorNotFoundError),\n/* harmony export */   Context: () => (/* binding */ Context),\n/* harmony export */   SwitchChainNotSupportedError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.SwitchChainNotSupportedError),\n/* harmony export */   WagmiConfig: () => (/* binding */ WagmiConfig),\n/* harmony export */   configureChains: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.configureChains),\n/* harmony export */   createConfig: () => (/* binding */ createConfig),\n/* harmony export */   createStorage: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createStorage),\n/* harmony export */   deepEqual: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual),\n/* harmony export */   deserialize: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deserialize),\n/* harmony export */   erc20ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc20ABI),\n/* harmony export */   erc4626ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc4626ABI),\n/* harmony export */   erc721ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc721ABI),\n/* harmony export */   mainnet: () => (/* reexport safe */ viem_chains__WEBPACK_IMPORTED_MODULE_17__.mainnet),\n/* harmony export */   paginatedIndexesConfig: () => (/* binding */ paginatedIndexesConfig),\n/* harmony export */   readContracts: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts),\n/* harmony export */   sepolia: () => (/* reexport safe */ viem_chains__WEBPACK_IMPORTED_MODULE_18__.sepolia),\n/* harmony export */   serialize: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.serialize),\n/* harmony export */   useAccount: () => (/* binding */ useAccount),\n/* harmony export */   useBalance: () => (/* binding */ useBalance),\n/* harmony export */   useBlockNumber: () => (/* binding */ useBlockNumber),\n/* harmony export */   useChainId: () => (/* binding */ useChainId),\n/* harmony export */   useConfig: () => (/* binding */ useConfig),\n/* harmony export */   useConnect: () => (/* binding */ useConnect),\n/* harmony export */   useContractEvent: () => (/* binding */ useContractEvent),\n/* harmony export */   useContractInfiniteReads: () => (/* binding */ useContractInfiniteReads),\n/* harmony export */   useContractRead: () => (/* binding */ useContractRead),\n/* harmony export */   useContractReads: () => (/* binding */ useContractReads),\n/* harmony export */   useContractWrite: () => (/* binding */ useContractWrite),\n/* harmony export */   useDisconnect: () => (/* binding */ useDisconnect),\n/* harmony export */   useEnsAddress: () => (/* binding */ useEnsAddress),\n/* harmony export */   useEnsAvatar: () => (/* binding */ useEnsAvatar),\n/* harmony export */   useEnsName: () => (/* binding */ useEnsName),\n/* harmony export */   useEnsResolver: () => (/* binding */ useEnsResolver),\n/* harmony export */   useFeeData: () => (/* binding */ useFeeData),\n/* harmony export */   useInfiniteQuery: () => (/* binding */ useInfiniteQuery),\n/* harmony export */   useMutation: () => (/* binding */ useMutation),\n/* harmony export */   useNetwork: () => (/* binding */ useNetwork),\n/* harmony export */   usePrepareContractWrite: () => (/* binding */ usePrepareContractWrite),\n/* harmony export */   usePrepareSendTransaction: () => (/* binding */ usePrepareSendTransaction),\n/* harmony export */   usePublicClient: () => (/* binding */ usePublicClient),\n/* harmony export */   useQuery: () => (/* binding */ useQuery),\n/* harmony export */   useQueryClient: () => (/* binding */ useQueryClient2),\n/* harmony export */   useSendTransaction: () => (/* binding */ useSendTransaction),\n/* harmony export */   useSignMessage: () => (/* binding */ useSignMessage),\n/* harmony export */   useSignTypedData: () => (/* binding */ useSignTypedData),\n/* harmony export */   useSwitchNetwork: () => (/* binding */ useSwitchNetwork),\n/* harmony export */   useToken: () => (/* binding */ useToken),\n/* harmony export */   useTransaction: () => (/* binding */ useTransaction),\n/* harmony export */   useWaitForTransaction: () => (/* binding */ useWaitForTransaction),\n/* harmony export */   useWalletClient: () => (/* binding */ useWalletClient),\n/* harmony export */   useWatchPendingTransactions: () => (/* binding */ useWatchPendingTransactions),\n/* harmony export */   useWebSocketPublicClient: () => (/* binding */ useWebSocketPublicClient)\n/* harmony export */ });\n/* harmony import */ var _tanstack_query_sync_storage_persister__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/query-sync-storage-persister */ \"(ssr)/../node_modules/@tanstack/query-sync-storage-persister/build/lib/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/query-core/build/lib/queryClient.mjs\");\n/* harmony import */ var _tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-query-persist-client */ \"(ssr)/../node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/../node_modules/@wagmi/core/dist/chunk-TSH6VVF4.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/isRestoring.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/../node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\");\n/* harmony import */ var use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector.js */ \"(ssr)/../node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/../node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/../node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! viem/chains */ \"(ssr)/../node_modules/viem/_esm/chains/definitions/mainnet.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! viem/chains */ \"(ssr)/../node_modules/viem/_esm/chains/definitions/sepolia.js\");\n\"use client\";\n\n// src/config.ts\n\n\n\n\nfunction createConfig({\n  queryClient = new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.QueryClient({\n    defaultOptions: {\n      queries: {\n        cacheTime: 1e3 * 60 * 60 * 24,\n        networkMode: \"offlineFirst\",\n        refetchOnWindowFocus: false,\n        retry: 0\n      },\n      mutations: {\n        networkMode: \"offlineFirst\"\n      }\n    }\n  }),\n  storage = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createStorage)({\n    storage: typeof window !== \"undefined\" && window.localStorage ? window.localStorage : _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.noopStorage\n  }),\n  persister = typeof window !== \"undefined\" ? (0,_tanstack_query_sync_storage_persister__WEBPACK_IMPORTED_MODULE_2__.createSyncStoragePersister)({\n    key: \"cache\",\n    storage,\n    serialize: (x) => x,\n    deserialize: (x) => x\n  }) : void 0,\n  ...args\n}) {\n  const config = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createConfig)({\n    ...args,\n    storage\n  });\n  if (persister)\n    (0,_tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_3__.persistQueryClient)({\n      queryClient,\n      persister,\n      dehydrateOptions: {\n        shouldDehydrateQuery: (query) => query.cacheTime !== 0 && query.queryKey[0].persist !== false\n      }\n    });\n  return Object.assign(config, { queryClient });\n}\n\n// src/context.ts\n\n\nvar Context = react__WEBPACK_IMPORTED_MODULE_4__.createContext(void 0);\nvar queryClientContext = react__WEBPACK_IMPORTED_MODULE_4__.createContext(\n  void 0\n);\nfunction WagmiConfig({\n  children,\n  config\n}) {\n  return react__WEBPACK_IMPORTED_MODULE_4__.createElement(Context.Provider, {\n    children: react__WEBPACK_IMPORTED_MODULE_4__.createElement(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.QueryClientProvider, {\n      children,\n      client: config.queryClient,\n      context: queryClientContext\n    }),\n    value: config\n  });\n}\nfunction useConfig() {\n  const config = react__WEBPACK_IMPORTED_MODULE_4__.useContext(Context);\n  if (!config)\n    throw new Error(\n      [\n        \"`useConfig` must be used within `WagmiConfig`.\\n\",\n        \"Read more: https://wagmi.sh/react/WagmiConfig\"\n      ].join(\"\\n\")\n    );\n  return config;\n}\n\n// src/hooks/accounts/useAccount.ts\n\n\n\n// src/hooks/utils/query/useBaseQuery.ts\n\n\n\n// src/hooks/utils/useSyncExternalStore.ts\n\nvar useSyncExternalStore2 = use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_6__.useSyncExternalStore;\n\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  }\n  const ctor = o.constructor;\n  if (typeof ctor === \"undefined\") {\n    return true;\n  }\n  const prot = ctor.prototype;\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  }\n  if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  }\n  return true;\n}\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n  if (typeof arg2 === \"function\") {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 };\n  }\n  return { ...arg2, queryKey: arg1 };\n}\nfunction queryKeyHashFn(queryKey17) {\n  return JSON.stringify(\n    queryKey17,\n    (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n      result[key] = val[key];\n      return result;\n    }, {}) : typeof val === \"bigint\" ? val.toString() : val\n  );\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n  if (typeof _useErrorBoundary === \"function\") {\n    return _useErrorBoundary(...params);\n  }\n  return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n  const trackedResult = {};\n  Object.keys(result).forEach((key) => {\n    Object.defineProperty(trackedResult, key, {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        observer.trackedProps.add(key);\n        return result[key];\n      }\n    });\n  });\n  return trackedResult;\n}\n\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n  const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.useQueryClient)({ context: options.context });\n  const isRestoring = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.useIsRestoring)();\n  const errorResetBoundary = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.useQueryErrorResetBoundary)();\n  const defaultedOptions = queryClient.defaultQueryOptions({\n    ...options,\n    queryKeyHashFn\n  });\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.notifyManager.batchCalls(\n      defaultedOptions.onError\n    );\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    );\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    );\n  }\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n  const [observer] = react__WEBPACK_IMPORTED_MODULE_4__.useState(\n    () => new Observer(\n      queryClient,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore2(\n    react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n      (onStoreChange) => isRestoring ? () => void 0 : observer.subscribe(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  react__WEBPACK_IMPORTED_MODULE_4__.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  react__WEBPACK_IMPORTED_MODULE_4__.useEffect(() => {\n    observer.setOptions(defaultedOptions, { listeners: false });\n  }, [defaultedOptions, observer]);\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(({ data }) => {\n      defaultedOptions.onSuccess?.(data);\n      defaultedOptions.onSettled?.(data, null);\n    }).catch((error) => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError?.(error);\n      defaultedOptions.onSettled?.(void 0, error);\n    });\n  }\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [\n    result.error,\n    observer.getCurrentQuery()\n  ])) {\n    throw result.error;\n  }\n  const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n  const isIdle = status === \"idle\";\n  const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n  return {\n    ...result,\n    defaultedOptions,\n    isIdle,\n    isLoading,\n    observer,\n    status\n  };\n}\n\n// src/hooks/utils/query/useInfiniteQuery.ts\n\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery(\n    { context: queryClientContext, ...parsedOptions },\n    _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.InfiniteQueryObserver\n  );\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchNextPage: baseQuery.fetchNextPage,\n    fetchStatus: baseQuery.fetchStatus,\n    hasNextPage: baseQuery.hasNextPage,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isFetchingNextPage: baseQuery.isFetchingNextPage,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useMutation.ts\n\nfunction useMutation(arg1, arg2, arg3) {\n  const options = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.parseMutationArgs)(arg1, arg2, arg3);\n  return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({ context: queryClientContext, ...options });\n}\n\n// src/hooks/utils/query/useQuery.ts\n\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({ context: queryClientContext, ...parsedOptions }, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__.QueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchStatus: baseQuery.fetchStatus,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useQueryClient.ts\n\nvar useQueryClient2 = () => (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.useQueryClient)({ context: queryClientContext });\n\n// src/hooks/viem/usePublicClient.ts\n\n\nfunction usePublicClient({\n  chainId\n} = {}) {\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_14__.useSyncExternalStoreWithSelector)(\n    (cb) => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchPublicClient)({ chainId }, cb),\n    () => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getPublicClient)({ chainId }),\n    () => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getPublicClient)({ chainId }),\n    (x) => x,\n    (a, b) => a.uid === b.uid\n  );\n}\n\n// src/hooks/viem/useWalletClient.ts\n\n\nfunction queryKey({ chainId }) {\n  return [{ entity: \"walletClient\", chainId, persist: false }];\n}\nfunction queryFn({\n  queryKey: [{ chainId }]\n}) {\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getWalletClient)({ chainId });\n}\nfunction useWalletClient({\n  chainId: chainId_,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { connector } = useAccount();\n  const chainId = useChainId({ chainId: chainId_ });\n  const walletClientQuery = useQuery(queryKey({ chainId }), queryFn, {\n    cacheTime: 0,\n    enabled: Boolean(connector),\n    staleTime: Infinity,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  const queryClient = useQueryClient2();\n  react__WEBPACK_IMPORTED_MODULE_4__.useEffect(() => {\n    const unwatch = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchWalletClient)({ chainId }, (walletClient) => {\n      if (walletClient)\n        queryClient.invalidateQueries(queryKey({ chainId }));\n      else\n        queryClient.removeQueries(queryKey({ chainId }));\n    });\n    return unwatch;\n  }, [queryClient, chainId]);\n  return walletClientQuery;\n}\n\n// src/hooks/viem/useWebSocketPublicClient.ts\n\n\nfunction useWebSocketPublicClient({ chainId } = {}) {\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_14__.useSyncExternalStoreWithSelector)(\n    (cb) => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchWebSocketPublicClient)({ chainId }, cb),\n    () => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getWebSocketPublicClient)({ chainId }),\n    () => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getWebSocketPublicClient)({ chainId }),\n    (x) => x,\n    (a, b) => a?.uid === b?.uid\n  );\n}\n\n// src/hooks/utils/useChainId.ts\nfunction useChainId({ chainId } = {}) {\n  const publicClient = usePublicClient({ chainId });\n  return publicClient.chain.id;\n}\n\n// src/hooks/utils/useForceUpdate.ts\n\nfunction useForceUpdate() {\n  const [, forceUpdate] = react__WEBPACK_IMPORTED_MODULE_4__.useReducer((x) => x + 1, 0);\n  return forceUpdate;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\n\n\n// src/hooks/network-status/useBlockNumber.ts\n\n\nfunction queryKey2({ chainId, scopeKey }) {\n  return [{ entity: \"blockNumber\", chainId, scopeKey }];\n}\nfunction queryFn2({\n  queryKey: [{ chainId }]\n}) {\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchBlockNumber)({ chainId });\n}\nfunction useBlockNumber({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  watch = false,\n  onBlock,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const publicClient = usePublicClient({ chainId });\n  const webSocketPublicClient = useWebSocketPublicClient({ chainId });\n  const queryClient = useQueryClient2();\n  react__WEBPACK_IMPORTED_MODULE_4__.useEffect(() => {\n    if (!enabled)\n      return;\n    if (!watch && !onBlock)\n      return;\n    const publicClient_ = webSocketPublicClient ?? publicClient;\n    const unwatch = publicClient_.watchBlockNumber({\n      onBlockNumber: (blockNumber) => {\n        if (watch)\n          queryClient.setQueryData(queryKey2({ chainId, scopeKey }), blockNumber);\n        if (onBlock)\n          onBlock(blockNumber);\n      },\n      emitOnBegin: true\n    });\n    return unwatch;\n  }, [\n    chainId,\n    scopeKey,\n    onBlock,\n    publicClient,\n    queryClient,\n    watch,\n    webSocketPublicClient,\n    enabled\n  ]);\n  return useQuery(queryKey2({ scopeKey, chainId }), queryFn2, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/network-status/useFeeData.ts\n\n\nfunction queryKey3({\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{ entity: \"feeData\", chainId, formatUnits, scopeKey }];\n}\nfunction queryFn3({\n  queryKey: [{ chainId, formatUnits }]\n}) {\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchFeeData)({ chainId, formatUnits });\n}\nfunction useFeeData({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits = \"gwei\",\n  scopeKey,\n  staleTime,\n  suspense,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const queryKey_ = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(\n    () => queryKey3({\n      chainId,\n      formatUnits,\n      scopeKey\n    }),\n    [chainId, formatUnits, scopeKey]\n  );\n  const feeDataQuery = useQuery(queryKey_, queryFn3, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch),\n    queryKey: queryKey_\n  });\n  return feeDataQuery;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock({\n  chainId,\n  enabled,\n  queryKey: queryKey17\n}) {\n  const queryClient = useQueryClient2();\n  const onBlock = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    () => queryClient.invalidateQueries({ queryKey: queryKey17 }, { cancelRefetch: false }),\n    [queryClient, queryKey17]\n  );\n  useBlockNumber({\n    chainId,\n    enabled,\n    onBlock: enabled ? onBlock : void 0,\n    scopeKey: enabled ? void 0 : \"idle\"\n  });\n}\n\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\n\n\n\nvar isPlainObject2 = (obj) => typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot, getServerSnapshot = getSnapshot, isEqual = _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual) {\n  const trackedKeys = react__WEBPACK_IMPORTED_MODULE_4__.useRef([]);\n  const result = (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_14__.useSyncExternalStoreWithSelector)(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    (x) => x,\n    (a, b) => {\n      if (isPlainObject2(a) && isPlainObject2(b) && trackedKeys.current.length) {\n        for (const key of trackedKeys.current) {\n          const equal = isEqual(\n            a[key],\n            b[key]\n          );\n          if (!equal)\n            return false;\n        }\n        return true;\n      }\n      return isEqual(a, b);\n    }\n  );\n  if (isPlainObject2(result)) {\n    const trackedResult = { ...result };\n    Object.defineProperties(\n      trackedResult,\n      Object.entries(trackedResult).reduce(\n        (res, [key, value]) => {\n          return {\n            ...res,\n            [key]: {\n              configurable: false,\n              enumerable: true,\n              get: () => {\n                if (!trackedKeys.current.includes(key)) {\n                  trackedKeys.current.push(key);\n                }\n                return value;\n              }\n            }\n          };\n        },\n        {}\n      )\n    );\n    return trackedResult;\n  }\n  return result;\n}\n\n// src/hooks/accounts/useAccount.ts\nfunction useAccount({ onConnect, onDisconnect } = {}) {\n  const config = useConfig();\n  const watchAccount_ = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (callback) => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchAccount)(callback),\n    [config]\n  );\n  const account = useSyncExternalStoreWithTracked(watchAccount_, _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getAccount);\n  const previousAccountRef = react__WEBPACK_IMPORTED_MODULE_4__.useRef();\n  const previousAccount = previousAccountRef.current;\n  react__WEBPACK_IMPORTED_MODULE_4__.useEffect(() => {\n    if (previousAccount?.status !== \"connected\" && account.status === \"connected\") {\n      onConnect?.({\n        address: account.address,\n        connector: account.connector,\n        isReconnected: previousAccount?.status === \"reconnecting\" || previousAccount?.status === void 0\n      });\n    }\n    if (previousAccount?.status === \"connected\" && account.status === \"disconnected\") {\n      onDisconnect?.();\n    }\n    previousAccountRef.current = account;\n  }, [onConnect, onDisconnect, previousAccount, account]);\n  return account;\n}\n\n// src/hooks/accounts/useBalance.ts\n\n\nfunction queryKey4({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey,\n  token\n}) {\n  return [\n    {\n      entity: \"balance\",\n      address,\n      chainId,\n      formatUnits,\n      scopeKey,\n      token\n    }\n  ];\n}\nfunction queryFn4({\n  queryKey: [{ address, chainId, formatUnits, token }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchBalance)({ address, chainId, formatUnits, token });\n}\nfunction useBalance({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits,\n  scopeKey,\n  staleTime,\n  suspense,\n  token,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const queryKey_ = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(\n    () => queryKey4({ address, chainId, formatUnits, scopeKey, token }),\n    [address, chainId, formatUnits, scopeKey, token]\n  );\n  const balanceQuery = useQuery(queryKey_, queryFn4, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && address),\n    queryKey: queryKey_\n  });\n  return balanceQuery;\n}\n\n// src/hooks/accounts/useConnect.ts\n\n\nvar mutationKey = (args) => [{ entity: \"connect\", ...args }];\nvar mutationFn = (args) => {\n  const { connector, chainId } = args;\n  if (!connector)\n    throw new Error(\"connector is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.connect)({ connector, chainId });\n};\nfunction useConnect({\n  chainId,\n  connector,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const config = useConfig();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey({ connector, chainId }), mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const connect2 = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (args) => {\n      return mutate({\n        chainId: args?.chainId ?? chainId,\n        connector: args?.connector ?? connector\n      });\n    },\n    [chainId, connector, mutate]\n  );\n  const connectAsync = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (args) => {\n      return mutateAsync({\n        chainId: args?.chainId ?? chainId,\n        connector: args?.connector ?? connector\n      });\n    },\n    [chainId, connector, mutateAsync]\n  );\n  return {\n    connect: connect2,\n    connectAsync,\n    connectors: config.connectors,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingConnector: variables?.connector,\n    reset,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useDisconnect.ts\n\nvar mutationKey2 = [{ entity: \"disconnect\" }];\nvar mutationFn2 = () => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.disconnect)();\nfunction useDisconnect({\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate: disconnect2,\n    mutateAsync: disconnectAsync,\n    reset,\n    status\n  } = useMutation(mutationKey2, mutationFn2, {\n    ...onError ? {\n      onError(error2, _variables, context) {\n        onError(error2, context);\n      }\n    } : {},\n    onMutate,\n    ...onSettled ? {\n      onSettled(_data, error2, _variables, context) {\n        onSettled(error2, context);\n      }\n    } : {},\n    ...onSuccess ? {\n      onSuccess(_data, _variables, context) {\n        onSuccess(context);\n      }\n    } : {}\n  });\n  return {\n    disconnect: disconnect2,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status\n  };\n}\n\n// src/hooks/accounts/useNetwork.ts\n\n\nfunction useNetwork() {\n  const config = useConfig();\n  const watchNetwork_ = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(\n    (callback) => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchNetwork)(callback),\n    [config]\n  );\n  return useSyncExternalStoreWithTracked(watchNetwork_, _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getNetwork);\n}\n\n// src/hooks/accounts/useSignMessage.ts\n\n\nvar mutationKey3 = (args) => [{ entity: \"signMessage\", ...args }];\nvar mutationFn3 = (args) => {\n  const { message } = args;\n  if (!message)\n    throw new Error(\"message is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.signMessage)({ message });\n};\nfunction useSignMessage({\n  message,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey3({ message }), mutationFn3, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signMessage2 = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (args) => mutate(args || { message }),\n    [message, mutate]\n  );\n  const signMessageAsync = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (args) => mutateAsync(args || { message }),\n    [message, mutateAsync]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signMessage: signMessage2,\n    signMessageAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSignTypedData.ts\n\n\nfunction mutationKey4({ domain, types, message, primaryType }) {\n  return [\n    { entity: \"signTypedData\", domain, types, message, primaryType }\n  ];\n}\nfunction mutationFn4(args) {\n  const { domain, types, primaryType, message } = args;\n  if (!domain)\n    throw new Error(\"domain is required\");\n  if (!types)\n    throw new Error(\"types is required\");\n  if (!primaryType)\n    throw new Error(\"primaryType is required\");\n  if (!message)\n    throw new Error(\"message is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.signTypedData)({\n    domain,\n    message,\n    primaryType,\n    types\n  });\n}\nfunction useSignTypedData({\n  domain,\n  types,\n  message,\n  primaryType,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey4({\n      domain,\n      message,\n      primaryType,\n      types\n    }),\n    mutationFn4,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const signTypedData2 = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (args) => mutate({\n      domain: args?.domain ?? domain,\n      types: args?.types ?? types,\n      message: args?.message ?? message,\n      primaryType: args?.primaryType ?? primaryType\n    }),\n    [domain, types, primaryType, message, mutate]\n  );\n  const signTypedDataAsync = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (args) => mutateAsync({\n      domain: args?.domain ?? domain,\n      types: args?.types ?? types,\n      message: args?.message ?? message,\n      primaryType: args?.primaryType ?? primaryType\n    }),\n    [domain, types, primaryType, message, mutateAsync]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signTypedData: signTypedData2,\n    signTypedDataAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSwitchNetwork.ts\n\n\nvar mutationKey5 = (args) => [{ entity: \"switchNetwork\", ...args }];\nvar mutationFn5 = (args) => {\n  const { chainId } = args;\n  if (!chainId)\n    throw new Error(\"chainId is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.switchNetwork)({ chainId });\n};\nfunction useSwitchNetwork({\n  chainId,\n  throwForSwitchChainNotSupported,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const config = useConfig();\n  const forceUpdate = useForceUpdate();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey5({ chainId }), mutationFn5, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const switchNetwork_ = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (chainId_) => mutate({ chainId: chainId_ ?? chainId }),\n    [chainId, mutate]\n  );\n  const switchNetworkAsync_ = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (chainId_) => mutateAsync({ chainId: chainId_ ?? chainId }),\n    [chainId, mutateAsync]\n  );\n  react__WEBPACK_IMPORTED_MODULE_4__.useEffect(() => {\n    const unwatch = config.subscribe(\n      ({ chains, connector }) => ({\n        chains,\n        connector\n      }),\n      forceUpdate\n    );\n    return unwatch;\n  }, [config, forceUpdate]);\n  let switchNetwork2;\n  let switchNetworkAsync;\n  const supportsSwitchChain = !!config.connector?.switchChain;\n  if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n    switchNetwork2 = switchNetwork_;\n    switchNetworkAsync = switchNetworkAsync_;\n  }\n  return {\n    chains: config.chains ?? [],\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingChainId: variables?.chainId,\n    reset,\n    status,\n    switchNetwork: switchNetwork2,\n    switchNetworkAsync,\n    variables\n  };\n}\n\n// src/hooks/contracts/useContractEvent.ts\n\nfunction useContractEvent({\n  address,\n  chainId,\n  abi,\n  listener,\n  eventName\n} = {}) {\n  const publicClient = usePublicClient({ chainId });\n  const webSocketPublicClient = useWebSocketPublicClient({ chainId });\n  const unwatch = react__WEBPACK_IMPORTED_MODULE_4__.useRef();\n  react__WEBPACK_IMPORTED_MODULE_4__.useEffect(() => {\n    if (!abi || !address || !eventName)\n      return;\n    const publicClient_ = webSocketPublicClient || publicClient;\n    unwatch.current = publicClient_.watchContractEvent({\n      abi,\n      address,\n      eventName,\n      onLogs: listener\n    });\n    return unwatch.current;\n  }, [abi, address, eventName, publicClient.uid, webSocketPublicClient?.uid]);\n  return unwatch.current;\n}\n\n// src/hooks/contracts/useContractInfiniteReads.ts\n\n\n\nfunction queryKey5({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  cacheKey,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContractsInfinite\",\n      allowFailure,\n      blockNumber,\n      blockTag,\n      cacheKey,\n      scopeKey\n    }\n  ];\n}\nfunction queryFn5({\n  contracts\n}) {\n  return ({\n    queryKey: [{ allowFailure, blockNumber, blockTag }],\n    pageParam\n  }) => {\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts)({\n      allowFailure,\n      blockNumber,\n      blockTag,\n      contracts: contracts(pageParam || void 0)\n    });\n  };\n}\nfunction useContractInfiniteReads({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  cacheKey,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  getNextPageParam,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.replaceEqualDeep)(oldData, newData),\n  suspense\n}) {\n  const queryKey_ = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(\n    () => queryKey5({ allowFailure, blockNumber, blockTag, cacheKey, scopeKey }),\n    [allowFailure, blockNumber, blockTag, cacheKey, scopeKey]\n  );\n  const enabled = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(() => {\n    const enabled2 = Boolean(enabled_ && contracts);\n    return enabled2;\n  }, [contracts, enabled_]);\n  return useInfiniteQuery(queryKey_, queryFn5({ contracts }), {\n    cacheTime,\n    enabled,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\nfunction paginatedIndexesConfig(fn, {\n  perPage,\n  start,\n  direction\n}) {\n  const contracts = (page = 0) => [...Array(perPage).keys()].map((index) => {\n    return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n  }).filter((index) => index >= 0).flatMap(fn);\n  return {\n    contracts,\n    getNextPageParam(lastPage, pages) {\n      return lastPage?.length === perPage ? pages.length : void 0;\n    }\n  };\n}\n\n// src/hooks/contracts/useContractRead.ts\n\n\n\nfunction queryKey6({\n  account,\n  address,\n  args,\n  blockNumber,\n  blockTag,\n  chainId,\n  functionName,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContract\",\n      account,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      functionName,\n      scopeKey\n    }\n  ];\n}\nfunction queryFn6({ abi }) {\n  return async ({\n    queryKey: [\n      { account, address, args, blockNumber, blockTag, chainId, functionName }\n    ]\n  }) => {\n    if (!abi)\n      throw new Error(\"abi is required\");\n    if (!address)\n      throw new Error(\"address is required\");\n    return await (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n      account,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      abi,\n      functionName\n    }) ?? null;\n  };\n}\nfunction useContractRead({\n  abi,\n  address,\n  account,\n  args,\n  blockNumber: blockNumberOverride,\n  blockTag,\n  cacheOnBlock = false,\n  cacheTime,\n  chainId: chainId_,\n  enabled: enabled_ = true,\n  functionName,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.replaceEqualDeep)(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const { data: blockNumber_ } = useBlockNumber({\n    chainId,\n    enabled: watch || cacheOnBlock,\n    scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n    watch\n  });\n  const blockNumber = blockNumberOverride ?? blockNumber_;\n  const queryKey_ = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(\n    () => queryKey6({\n      account,\n      address,\n      args,\n      blockNumber: cacheOnBlock ? blockNumber : void 0,\n      blockTag,\n      chainId,\n      functionName,\n      scopeKey\n    }),\n    [\n      account,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      cacheOnBlock,\n      chainId,\n      functionName,\n      scopeKey\n    ]\n  );\n  const enabled = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && abi && address && functionName);\n    if (cacheOnBlock)\n      enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [abi, address, blockNumber, cacheOnBlock, enabled_, functionName]);\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  return useQuery(\n    queryKey_,\n    queryFn6({\n      abi\n    }),\n    {\n      cacheTime,\n      enabled,\n      isDataEqual,\n      keepPreviousData,\n      select,\n      staleTime,\n      structuralSharing,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/contracts/useContractReads.ts\n\n\n\nfunction queryKey7({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  chainId,\n  contracts,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContracts\",\n      allowFailure,\n      blockNumber,\n      blockTag,\n      chainId,\n      scopeKey,\n      contracts: (contracts ?? []).map(({ address, args, chainId: chainId2, functionName }) => ({\n        address,\n        args,\n        chainId: chainId2,\n        functionName\n      }))\n    }\n  ];\n}\nfunction queryFn7({ abis }) {\n  return ({\n    queryKey: [{ allowFailure, blockNumber, blockTag, contracts: contracts_ }]\n  }) => {\n    const contracts = contracts_.map((contract, i) => ({\n      ...contract,\n      abi: abis[i]\n    }));\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts)({\n      allowFailure,\n      contracts,\n      blockNumber,\n      blockTag\n    });\n  };\n}\nfunction useContractReads({\n  allowFailure: allowFailure_,\n  blockNumber: blockNumberOverride,\n  blockTag,\n  cacheOnBlock = false,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.replaceEqualDeep)(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const allowFailure = allowFailure_ ?? true;\n  const { data: blockNumber_ } = useBlockNumber({\n    enabled: watch || cacheOnBlock,\n    watch\n  });\n  const chainId = useChainId();\n  const blockNumber = blockNumberOverride ?? blockNumber_;\n  const queryKey_ = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(\n    () => queryKey7({\n      allowFailure,\n      blockNumber: cacheOnBlock ? blockNumber : void 0,\n      blockTag,\n      chainId,\n      contracts,\n      scopeKey\n    }),\n    [\n      allowFailure,\n      blockNumber,\n      blockTag,\n      cacheOnBlock,\n      chainId,\n      scopeKey,\n      contracts\n    ]\n  );\n  const enabled = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(() => {\n    let enabled2 = Boolean(\n      enabled_ && contracts?.every(\n        (x) => x.abi && x.address && x.functionName\n      )\n    );\n    if (cacheOnBlock)\n      enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [blockNumber, cacheOnBlock, contracts, enabled_]);\n  useInvalidateOnBlock({\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  const abis = (contracts ?? []).map(\n    ({ abi }) => abi\n  );\n  return useQuery(queryKey_, queryFn7({ abis }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    staleTime,\n    select,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractWrite.ts\n\n\n\nfunction mutationKey6({\n  address,\n  abi,\n  functionName,\n  ...config\n}) {\n  const {\n    args,\n    accessList,\n    account,\n    dataSuffix,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    request,\n    value\n  } = config;\n  return [\n    {\n      entity: \"writeContract\",\n      address,\n      args,\n      abi,\n      accessList,\n      account,\n      dataSuffix,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      request,\n      value\n    }\n  ];\n}\nfunction mutationFn6(config) {\n  if (config.mode === \"prepared\") {\n    if (!config.request)\n      throw new Error(\"request is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.writeContract)({\n      mode: \"prepared\",\n      request: config.request\n    });\n  }\n  if (!config.address)\n    throw new Error(\"address is required\");\n  if (!config.abi)\n    throw new Error(\"abi is required\");\n  if (!config.functionName)\n    throw new Error(\"functionName is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.writeContract)({\n    address: config.address,\n    args: config.args,\n    chainId: config.chainId,\n    abi: config.abi,\n    functionName: config.functionName,\n    accessList: config.accessList,\n    account: config.account,\n    dataSuffix: config.dataSuffix,\n    gas: config.gas,\n    gasPrice: config.gasPrice,\n    maxFeePerGas: config.maxFeePerGas,\n    maxPriorityFeePerGas: config.maxPriorityFeePerGas,\n    nonce: config.nonce,\n    value: config.value\n  });\n}\nfunction useContractWrite(config) {\n  const {\n    address,\n    abi,\n    args,\n    chainId,\n    functionName,\n    mode,\n    request,\n    dataSuffix\n  } = config;\n  const {\n    accessList,\n    account,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    value\n  } = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getSendTransactionParameters)(config);\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey6({\n      address,\n      abi,\n      functionName,\n      chainId,\n      mode,\n      args,\n      accessList,\n      account,\n      dataSuffix,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      request,\n      value\n    }),\n    mutationFn6,\n    {\n      onError: config.onError,\n      onMutate: config.onMutate,\n      onSettled: config.onSettled,\n      onSuccess: config.onSuccess\n    }\n  );\n  const write = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(() => {\n    if (config.mode === \"prepared\") {\n      if (!request)\n        return void 0;\n      return () => mutate({\n        mode: \"prepared\",\n        request: config.request,\n        chainId: config.chainId\n      });\n    }\n    return (overrideConfig) => mutate({\n      address,\n      args,\n      abi,\n      functionName,\n      chainId,\n      accessList,\n      account,\n      dataSuffix,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      ...overrideConfig\n    });\n  }, [\n    accessList,\n    account,\n    abi,\n    address,\n    args,\n    chainId,\n    config.chainId,\n    config.mode,\n    config.request,\n    dataSuffix,\n    functionName,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    mutate,\n    nonce,\n    request,\n    value\n  ]);\n  const writeAsync = react__WEBPACK_IMPORTED_MODULE_4__.useMemo(() => {\n    if (config.mode === \"prepared\") {\n      if (!request)\n        return void 0;\n      return () => mutateAsync({\n        mode: \"prepared\",\n        request: config.request\n      });\n    }\n    return (overrideConfig) => mutateAsync({\n      address,\n      args,\n      abi,\n      chainId,\n      functionName,\n      accessList,\n      account,\n      dataSuffix,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      ...overrideConfig\n    });\n  }, [\n    accessList,\n    account,\n    abi,\n    address,\n    args,\n    chainId,\n    config.mode,\n    config.request,\n    dataSuffix,\n    functionName,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    mutateAsync,\n    nonce,\n    request,\n    value\n  ]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    write,\n    writeAsync\n  };\n}\n\n// src/hooks/contracts/usePrepareContractWrite.ts\n\n\nfunction queryKey8({\n  accessList,\n  account,\n  activeChainId,\n  args,\n  address,\n  blockNumber,\n  blockTag,\n  chainId,\n  dataSuffix,\n  functionName,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  scopeKey,\n  walletClientAddress,\n  value\n}) {\n  return [\n    {\n      entity: \"prepareContractTransaction\",\n      accessList,\n      account,\n      activeChainId,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      dataSuffix,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      scopeKey,\n      walletClientAddress,\n      value\n    }\n  ];\n}\nfunction queryFn8({\n  abi,\n  walletClient\n}) {\n  return ({\n    queryKey: [\n      {\n        accessList,\n        account,\n        args,\n        address,\n        blockNumber,\n        blockTag,\n        chainId,\n        dataSuffix,\n        functionName,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        value\n      }\n    ]\n  }) => {\n    if (!abi)\n      throw new Error(\"abi is required\");\n    if (!address)\n      throw new Error(\"address is required\");\n    if (!functionName)\n      throw new Error(\"functionName is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.prepareWriteContract)({\n      abi,\n      accessList,\n      account,\n      args,\n      address,\n      blockNumber,\n      blockTag,\n      chainId,\n      dataSuffix,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      walletClient,\n      value\n    });\n  };\n}\nfunction usePrepareContractWrite({\n  address,\n  abi,\n  functionName,\n  chainId,\n  args,\n  cacheTime,\n  dataSuffix,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess,\n  ...config\n} = {}) {\n  const { chain: activeChain } = useNetwork();\n  const { data: walletClient } = useWalletClient({ chainId });\n  const {\n    accessList,\n    account,\n    blockNumber,\n    blockTag,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    value\n  } = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getCallParameters)(config);\n  const prepareContractWriteQuery = useQuery(\n    queryKey8({\n      accessList,\n      account,\n      activeChainId: activeChain?.id,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      dataSuffix,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      scopeKey,\n      walletClientAddress: walletClient?.account.address,\n      value\n    }),\n    queryFn8({\n      abi,\n      walletClient\n    }),\n    {\n      cacheTime,\n      enabled: Boolean(\n        enabled && abi && address && functionName && walletClient\n      ),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n  return Object.assign(prepareContractWriteQuery, {\n    config: {\n      chainId,\n      mode: \"prepared\",\n      request: void 0,\n      ...prepareContractWriteQuery.data\n    }\n  });\n}\n\n// src/hooks/contracts/useToken.ts\n\nfunction queryKey9({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{ entity: \"token\", address, chainId, formatUnits, scopeKey }];\n}\nfunction queryFn9({\n  queryKey: [{ address, chainId, formatUnits }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchToken)({ address, chainId, formatUnits });\n}\nfunction useToken({\n  address,\n  chainId: chainId_,\n  formatUnits = \"ether\",\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(\n    queryKey9({ address, chainId, formatUnits, scopeKey }),\n    queryFn9,\n    {\n      cacheTime,\n      enabled: Boolean(enabled && address),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/ens/useEnsAddress.ts\n\nfunction queryKey10({ chainId, name, scopeKey }) {\n  return [{ entity: \"ensAddress\", chainId, name, scopeKey }];\n}\nfunction queryFn10({\n  queryKey: [{ chainId, name }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsAddress)({ chainId, name });\n}\nfunction useEnsAddress({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  name,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey10({ chainId, name, scopeKey }), queryFn10, {\n    cacheTime,\n    enabled: Boolean(enabled && chainId && name),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAvatar.ts\n\nfunction queryKey11({ name, chainId, scopeKey }) {\n  return [{ entity: \"ensAvatar\", name, chainId, scopeKey }];\n}\nfunction queryFn11({\n  queryKey: [{ name, chainId }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsAvatar)({ name, chainId });\n}\nfunction useEnsAvatar({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  name,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey11({ name, chainId, scopeKey }), queryFn11, {\n    cacheTime,\n    enabled: Boolean(enabled && name && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsName.ts\n\nfunction queryKey12({\n  address,\n  chainId,\n  scopeKey\n}) {\n  return [{ entity: \"ensName\", address, chainId, scopeKey }];\n}\nfunction queryFn12({\n  queryKey: [{ address, chainId }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsName)({ address, chainId });\n}\nfunction useEnsName({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey12({ address, chainId, scopeKey }), queryFn12, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsResolver.ts\n\nfunction queryKey13({ chainId, name, scopeKey }) {\n  return [\n    { entity: \"ensResolver\", chainId, name, scopeKey, persist: false }\n  ];\n}\nfunction queryFn13({\n  queryKey: [{ chainId, name }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsResolver)({ chainId, name });\n}\nfunction useEnsResolver({\n  chainId: chainId_,\n  name,\n  enabled = true,\n  scopeKey,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey13({ chainId, name, scopeKey }), queryFn13, {\n    cacheTime: 0,\n    enabled: Boolean(enabled && chainId && name),\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/usePrepareSendTransaction.ts\n\nfunction queryKey14({\n  accessList,\n  account,\n  activeChainId,\n  chainId,\n  data,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  to,\n  value,\n  scopeKey,\n  walletClientAddress\n}) {\n  return [\n    {\n      entity: \"prepareSendTransaction\",\n      activeChainId,\n      accessList,\n      account,\n      chainId,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      scopeKey,\n      walletClientAddress\n    }\n  ];\n}\nfunction queryFn14({ walletClient }) {\n  return ({\n    queryKey: [\n      {\n        accessList,\n        account,\n        chainId,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value\n      }\n    ]\n  }) => {\n    if (!to)\n      throw new Error(\"to is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.prepareSendTransaction)({\n      accessList,\n      account,\n      chainId,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      walletClient\n    });\n  };\n}\nfunction usePrepareSendTransaction({\n  accessList,\n  account,\n  chainId,\n  cacheTime,\n  data,\n  enabled = true,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  scopeKey,\n  staleTime,\n  suspense,\n  to,\n  value,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { chain: activeChain } = useNetwork();\n  const { data: walletClient } = useWalletClient({ chainId });\n  const prepareSendTransactionQuery = useQuery(\n    queryKey14({\n      accessList,\n      activeChainId: activeChain?.id,\n      account,\n      chainId,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      scopeKey,\n      to,\n      value,\n      walletClientAddress: walletClient?.account.address\n    }),\n    queryFn14({ walletClient }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && walletClient && to),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n  return Object.assign(prepareSendTransactionQuery, {\n    config: {\n      mode: \"prepared\",\n      ...prepareSendTransactionQuery.isSuccess ? prepareSendTransactionQuery.data : void 0\n    }\n  });\n}\n\n// src/hooks/transactions/useSendTransaction.ts\n\n\nvar mutationKey7 = (args) => [{ entity: \"sendTransaction\", ...args }];\nvar mutationFn7 = ({\n  accessList,\n  account,\n  chainId,\n  data,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  mode,\n  nonce,\n  to,\n  value\n}) => {\n  if (!to)\n    throw new Error(\"to is required.\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.sendTransaction)({\n    accessList,\n    account,\n    chainId,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    mode,\n    nonce,\n    to,\n    value\n  });\n};\nfunction useSendTransaction({\n  accessList,\n  account,\n  chainId,\n  data: data_,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  mode,\n  nonce,\n  to,\n  value,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey7({\n      accessList,\n      account,\n      chainId,\n      data: data_,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      mode,\n      nonce,\n      to,\n      value\n    }),\n    mutationFn7,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const sendTransaction2 = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (args) => mutate({\n      chainId,\n      mode,\n      ...args || {\n        accessList,\n        account,\n        chainId,\n        data: data_,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode,\n        nonce,\n        value,\n        to\n      }\n    }),\n    [\n      accessList,\n      account,\n      chainId,\n      data_,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      mode,\n      mutate,\n      nonce,\n      to,\n      value\n    ]\n  );\n  const sendTransactionAsync = react__WEBPACK_IMPORTED_MODULE_4__.useCallback(\n    (args) => mutateAsync({\n      chainId,\n      mode,\n      ...args || {\n        accessList,\n        account,\n        chainId,\n        data: data_,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode,\n        nonce,\n        value,\n        to\n      }\n    }),\n    [\n      accessList,\n      account,\n      chainId,\n      data_,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      mode,\n      mutateAsync,\n      nonce,\n      to,\n      value\n    ]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    sendTransaction: mode === \"prepared\" && !to ? void 0 : sendTransaction2,\n    sendTransactionAsync: mode === \"prepared\" && !to ? void 0 : sendTransactionAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/transactions/useTransaction.ts\n\nfunction queryKey15({ chainId, hash, scopeKey }) {\n  return [{ entity: \"transaction\", chainId, hash, scopeKey }];\n}\nfunction queryFn15({\n  queryKey: [{ chainId, hash }]\n}) {\n  if (!hash)\n    throw new Error(\"hash is required\");\n  return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchTransaction)({ chainId, hash });\n}\nfunction useTransaction({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  hash,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey15({ chainId, hash, scopeKey }), queryFn15, {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWaitForTransaction.ts\n\nfunction queryKey16({\n  confirmations,\n  chainId,\n  hash,\n  scopeKey,\n  timeout\n}) {\n  return [\n    {\n      entity: \"waitForTransaction\",\n      confirmations,\n      chainId,\n      hash,\n      scopeKey,\n      timeout\n    }\n  ];\n}\nfunction queryFn16({\n  onReplaced\n}) {\n  return ({\n    queryKey: [{ chainId, confirmations, hash, timeout }]\n  }) => {\n    if (!hash)\n      throw new Error(\"hash is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.waitForTransaction)({\n      chainId,\n      confirmations,\n      hash,\n      onReplaced,\n      timeout\n    });\n  };\n}\nfunction useWaitForTransaction({\n  chainId: chainId_,\n  confirmations,\n  hash,\n  timeout,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onReplaced,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(\n    queryKey16({ chainId, confirmations, hash, scopeKey, timeout }),\n    queryFn16({ onReplaced }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && hash),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/transactions/useWatchPendingTransactions.ts\n\nfunction useWatchPendingTransactions({\n  chainId: chainId_,\n  enabled = true,\n  listener\n}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const publicClient = usePublicClient({ chainId });\n  const webSocketPublicClient = useWebSocketPublicClient({ chainId });\n  react__WEBPACK_IMPORTED_MODULE_4__.useEffect(() => {\n    if (!enabled)\n      return;\n    const publicClient_ = webSocketPublicClient ?? publicClient;\n    return publicClient_.watchPendingTransactions({\n      onTransactions: listener\n    });\n  }, [enabled, listener, publicClient, webSocketPublicClient]);\n}\n\n// src/index.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/wagmi/dist/index.js\n");

/***/ })

};
;