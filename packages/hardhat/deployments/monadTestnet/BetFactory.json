{
  "address": "0x7CE3FF595B5c2d3b8218A776965A8b6B543A40d4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "question",
          "type": "string"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "winner",
          "type": "bool"
        }
      ],
      "name": "MarketSettled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "claimAllRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "question",
          "type": "string"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveMarketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMarketByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBetHistory",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "marketAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "yesAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "noAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPendingClaims",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "marketAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        }
      ],
      "name": "removeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMarkets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xda0dbd7e673097d03062a9551ce8ea72b7a15380e2535f63f09fc03452d3ff7b",
  "receipt": {
    "to": null,
    "from": "0xeb981047dC92C0C408f283a8B424d10d6cf6ff8D",
    "contractAddress": "0x7CE3FF595B5c2d3b8218A776965A8b6B543A40d4",
    "transactionIndex": 5,
    "gasUsed": "2513522",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc6dd74ec29f626e08c20e0aa980cd837fa2d98df5799a83e33c196afd66fcfd2",
    "transactionHash": "0xda0dbd7e673097d03062a9551ce8ea72b7a15380e2535f63f09fc03452d3ff7b",
    "logs": [],
    "blockNumber": 38305001,
    "cumulativeGasUsed": "6867587",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5e02cdd4f68256eb61a42d25fe61730f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"}],\"name\":\"MarketSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimAllRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveMarketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMarketByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBetHistory\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"marketAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yesAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"noAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPendingClaims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"marketAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"}],\"name\":\"removeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BetNad\",\"details\":\"Factory contract for creating and managing betting markets\",\"kind\":\"dev\",\"methods\":{\"claimAllRewards(address)\":{\"details\":\"Claim all pending rewards for a user across all markets\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"totalClaimed\":\"Total amount claimed across all markets\"}},\"createMarket(string)\":{\"details\":\"Create a new betting market\",\"params\":{\"question\":\"The question for the betting market\"},\"returns\":{\"_0\":\"The address of the created market\"}},\"emergencyWithdraw()\":{\"details\":\"Emergency withdraw function (only owner)\"},\"getActiveMarketCount()\":{\"details\":\"Get active market count\",\"returns\":{\"_0\":\"Number of active (non-settled) markets\"}},\"getActiveMarkets()\":{\"details\":\"Get all active (non-settled) markets\",\"returns\":{\"_0\":\"Array of active market addresses\"}},\"getAllMarkets()\":{\"details\":\"Get all markets (active and settled)\",\"returns\":{\"_0\":\"Array of all market addresses\"}},\"getContractBalance()\":{\"details\":\"Get contract balance (for emergency purposes)\",\"returns\":{\"_0\":\"The balance of the factory contract\"}},\"getMarketByIndex(uint256)\":{\"details\":\"Get market details by index\",\"params\":{\"index\":\"The index of the market in the markets array\"},\"returns\":{\"isActive\":\"Whether the market is active (not settled)\",\"marketAddress\":\"The address of the market\",\"question\":\"The question of the market\"}},\"getMarketCount()\":{\"details\":\"Get market count\",\"returns\":{\"_0\":\"Total number of markets created\"}},\"getUserBetHistory(address)\":{\"details\":\"Get user's bet history across all markets\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"marketAddresses\":\"Array of market addresses where user has bets\",\"noAmounts\":\"Array of amounts bet on no for each market\",\"totalAmounts\":\"Array of total amounts bet for each market\",\"yesAmounts\":\"Array of amounts bet on yes for each market\"}},\"getUserMarkets(address)\":{\"details\":\"Get all markets created by a specific user\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"Array of market addresses created by the user\"}},\"getUserPendingClaims(address)\":{\"details\":\"Get user's pending claims across all markets\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"claimAmounts\":\"Array of claimable amounts for each market\",\"marketAddresses\":\"Array of market addresses where user has pending claims\"}},\"removeMarket(address)\":{\"details\":\"Emergency function to remove a market (only owner)\",\"params\":{\"marketAddress\":\"The address of the market to remove\"}}},\"title\":\"BetFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BetFactory.sol\":\"BetFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BetFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./BetMarket.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title BetFactory\\n * @dev Factory contract for creating and managing betting markets\\n * @author BetNad\\n */\\ncontract BetFactory {\\n    // State Variables\\n    address public immutable owner;\\n    address[] public markets;\\n    mapping(address => bool) public isMarket;\\n    mapping(address => address[]) public userMarkets; // user => array of markets they created\\n\\n    // Events\\n    event MarketCreated(address indexed market, address indexed creator, string question);\\n    event MarketSettled(address indexed market, bool winner);\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Create a new betting market\\n     * @param question The question for the betting market\\n     * @return The address of the created market\\n     */\\n    function createMarket(string memory question) external returns (address) {\\n        BetMarket newMarket = new BetMarket(question, msg.sender);\\n        address marketAddress = address(newMarket);\\n\\n        markets.push(marketAddress);\\n        isMarket[marketAddress] = true;\\n        userMarkets[msg.sender].push(marketAddress);\\n\\n        emit MarketCreated(marketAddress, msg.sender, question);\\n\\n        return marketAddress;\\n    }\\n\\n    /**\\n     * @dev Get all active (non-settled) markets\\n     * @return Array of active market addresses\\n     */\\n    function getActiveMarkets() external view returns (address[] memory) {\\n        uint256 activeCount = 0;\\n\\n        // First pass: count active markets\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isMarket[markets[i]]) {\\n                BetMarket market = BetMarket(payable(markets[i]));\\n                (, , , , bool isSettled) = market.getMarketStats();\\n                if (!isSettled) {\\n                    activeCount++;\\n                }\\n            }\\n        }\\n\\n        // Second pass: populate array\\n        address[] memory activeMarkets = new address[](activeCount);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isMarket[markets[i]]) {\\n                BetMarket market = BetMarket(payable(markets[i]));\\n                (, , , , bool isSettled) = market.getMarketStats();\\n                if (!isSettled) {\\n                    activeMarkets[index] = markets[i];\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        return activeMarkets;\\n    }\\n\\n    /**\\n     * @dev Get all markets created by a specific user\\n     * @param user The address of the user\\n     * @return Array of market addresses created by the user\\n     */\\n    function getUserMarkets(address user) external view returns (address[] memory) {\\n        return userMarkets[user];\\n    }\\n\\n    /**\\n     * @dev Get all markets (active and settled)\\n     * @return Array of all market addresses\\n     */\\n    function getAllMarkets() external view returns (address[] memory) {\\n        return markets;\\n    }\\n\\n    /**\\n     * @dev Get market count\\n     * @return Total number of markets created\\n     */\\n    function getMarketCount() external view returns (uint256) {\\n        return markets.length;\\n    }\\n\\n    /**\\n     * @dev Get active market count\\n     * @return Number of active (non-settled) markets\\n     */\\n    function getActiveMarketCount() external view returns (uint256) {\\n        uint256 activeCount = 0;\\n\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isMarket[markets[i]]) {\\n                BetMarket market = BetMarket(payable(markets[i]));\\n                (, , , , bool isSettled) = market.getMarketStats();\\n                if (!isSettled) {\\n                    activeCount++;\\n                }\\n            }\\n        }\\n\\n        return activeCount;\\n    }\\n\\n    /**\\n     * @dev Get market details by index\\n     * @param index The index of the market in the markets array\\n     * @return marketAddress The address of the market\\n     * @return question The question of the market\\n     * @return isActive Whether the market is active (not settled)\\n     */\\n    function getMarketByIndex(\\n        uint256 index\\n    ) external view returns (address marketAddress, string memory question, bool isActive) {\\n        require(index < markets.length, \\\"Index out of bounds\\\");\\n\\n        marketAddress = markets[index];\\n        if (isMarket[marketAddress]) {\\n            BetMarket market = BetMarket(payable(marketAddress));\\n            question = market.getQuestion();\\n            (, , , , bool isSettled) = market.getMarketStats();\\n            isActive = !isSettled;\\n        } else {\\n            question = \\\"\\\";\\n            isActive = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Get user's bet history across all markets\\n     * @param user The address of the user\\n     * @return marketAddresses Array of market addresses where user has bets\\n     * @return yesAmounts Array of amounts bet on yes for each market\\n     * @return noAmounts Array of amounts bet on no for each market\\n     * @return totalAmounts Array of total amounts bet for each market\\n     */\\n    function getUserBetHistory(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory marketAddresses,\\n            uint256[] memory yesAmounts,\\n            uint256[] memory noAmounts,\\n            uint256[] memory totalAmounts\\n        )\\n    {\\n        // First pass: count markets where user has bets\\n        uint256 betCount = 0;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isMarket[markets[i]]) {\\n                BetMarket market = BetMarket(payable(markets[i]));\\n                (uint256 yesAmount, uint256 noAmount, ) = market.getUserBets(user);\\n                if (yesAmount > 0 || noAmount > 0) {\\n                    betCount++;\\n                }\\n            }\\n        }\\n\\n        // Initialize arrays\\n        marketAddresses = new address[](betCount);\\n        yesAmounts = new uint256[](betCount);\\n        noAmounts = new uint256[](betCount);\\n        totalAmounts = new uint256[](betCount);\\n\\n        // Second pass: populate arrays\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isMarket[markets[i]]) {\\n                BetMarket market = BetMarket(payable(markets[i]));\\n                (uint256 yesAmount, uint256 noAmount, uint256 totalAmount) = market.getUserBets(user);\\n                if (yesAmount > 0 || noAmount > 0) {\\n                    marketAddresses[index] = markets[i];\\n                    yesAmounts[index] = yesAmount;\\n                    noAmounts[index] = noAmount;\\n                    totalAmounts[index] = totalAmount;\\n                    index++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get user's pending claims across all markets\\n     * @param user The address of the user\\n     * @return marketAddresses Array of market addresses where user has pending claims\\n     * @return claimAmounts Array of claimable amounts for each market\\n     */\\n    function getUserPendingClaims(\\n        address user\\n    ) external view returns (address[] memory marketAddresses, uint256[] memory claimAmounts) {\\n        // First pass: count markets where user has pending claims\\n        uint256 claimCount = 0;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isMarket[markets[i]]) {\\n                BetMarket market = BetMarket(payable(markets[i]));\\n                uint256 pendingClaim = market.getPendingClaim(user);\\n                if (pendingClaim > 0) {\\n                    claimCount++;\\n                }\\n            }\\n        }\\n\\n        // Initialize arrays\\n        marketAddresses = new address[](claimCount);\\n        claimAmounts = new uint256[](claimCount);\\n\\n        // Second pass: populate arrays\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isMarket[markets[i]]) {\\n                BetMarket market = BetMarket(payable(markets[i]));\\n                uint256 pendingClaim = market.getPendingClaim(user);\\n                if (pendingClaim > 0) {\\n                    marketAddresses[index] = markets[i];\\n                    claimAmounts[index] = pendingClaim;\\n                    index++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Claim all pending rewards for a user across all markets\\n     * @param user The address of the user\\n     * @return totalClaimed Total amount claimed across all markets\\n     */\\n    function claimAllRewards(address user) external returns (uint256 totalClaimed) {\\n        totalClaimed = 0;\\n\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isMarket[markets[i]]) {\\n                BetMarket market = BetMarket(payable(markets[i]));\\n                uint256 pendingClaim = market.getPendingClaim(user);\\n                if (pendingClaim > 0) {\\n                    try market.claimReward() {\\n                        totalClaimed += pendingClaim;\\n                    } catch {\\n                        // Continue to next market if claim fails\\n                        continue;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Emergency function to remove a market (only owner)\\n     * @param marketAddress The address of the market to remove\\n     */\\n    function removeMarket(address marketAddress) external onlyOwner {\\n        require(isMarket[marketAddress], \\\"Market does not exist\\\");\\n        isMarket[marketAddress] = false;\\n    }\\n\\n    /**\\n     * @dev Get contract balance (for emergency purposes)\\n     * @return The balance of the factory contract\\n     */\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Emergency withdraw function (only owner)\\n     */\\n    function emergencyWithdraw() external onlyOwner {\\n        (bool success, ) = owner.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @dev Receive function to accept ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x32ea2e97bfc56015f354fe1329c7f8724697531b2bbb7a3c5b98cce8b660c25f\",\"license\":\"MIT\"},\"contracts/BetMarket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title BetMarket\\n * @dev A contract for individual betting markets where users can bet on yes/no outcomes\\n * @author BetNad\\n */\\ncontract BetMarket {\\n    // Constants\\n    uint256 public constant BET_AMOUNT = 0.01 ether;\\n\\n    // State Variables\\n    address public immutable creator;\\n    string public question;\\n    bool public isSettled;\\n    bool public winner; // true for yes, false for no\\n    uint256 public totalYesBets;\\n    uint256 public totalNoBets;\\n    uint256 public totalBets;\\n\\n    // Mappings\\n    mapping(address => uint256) public yesBets; // user => amount bet on yes\\n    mapping(address => uint256) public noBets; // user => amount bet on no\\n    mapping(address => bool) public hasClaimed; // user => whether they've claimed rewards\\n\\n    // Events\\n    event BetPlaced(address indexed user, bool betOnYes, uint256 amount);\\n    event MarketSettled(bool winner);\\n    event RewardClaimed(address indexed user, uint256 amount);\\n\\n    // Modifiers\\n    modifier onlyCreator() {\\n        require(msg.sender == creator, \\\"Only creator can call this function\\\");\\n        _;\\n    }\\n\\n    modifier notSettled() {\\n        require(!isSettled, \\\"Market is already settled\\\");\\n        _;\\n    }\\n\\n    modifier settled() {\\n        require(isSettled, \\\"Market is not settled yet\\\");\\n        _;\\n    }\\n\\n    constructor(string memory _question, address _creator) {\\n        creator = _creator;\\n        question = _question;\\n        isSettled = false;\\n    }\\n\\n    /**\\n     * @dev Place a bet on the market\\n     * @param betOnYes true to bet on yes, false to bet on no\\n     */\\n    function placeBet(bool betOnYes) external payable notSettled {\\n        require(msg.value == BET_AMOUNT, \\\"Must bet exactly 0.01 ETH\\\");\\n\\n        if (betOnYes) {\\n            yesBets[msg.sender] += msg.value;\\n            totalYesBets += msg.value;\\n        } else {\\n            noBets[msg.sender] += msg.value;\\n            totalNoBets += msg.value;\\n        }\\n\\n        totalBets += 1;\\n\\n        emit BetPlaced(msg.sender, betOnYes, msg.value);\\n    }\\n\\n    /**\\n     * @dev Settle the market with the winning outcome\\n     * @param _winner true for yes wins, false for no wins\\n     */\\n    function settleMarket(bool _winner) external onlyCreator notSettled {\\n        isSettled = true;\\n        winner = _winner;\\n\\n        emit MarketSettled(_winner);\\n    }\\n\\n    /**\\n     * @dev Calculate the reward for a user based on their winning bets\\n     * @param user The address to calculate reward for\\n     * @return The amount the user can claim\\n     */\\n    function calculateReward(address user) public view settled returns (uint256) {\\n        if (hasClaimed[user]) {\\n            return 0;\\n        }\\n\\n        uint256 userWinningBets = winner ? yesBets[user] : noBets[user];\\n        if (userWinningBets == 0) {\\n            return 0;\\n        }\\n\\n        uint256 totalWinningBets = winner ? totalYesBets : totalNoBets;\\n        uint256 totalLosingBets = winner ? totalNoBets : totalYesBets;\\n\\n        // Calculate reward: original bet + proportional share of losing bets\\n        return userWinningBets + (userWinningBets * totalLosingBets) / totalWinningBets;\\n    }\\n\\n    /**\\n     * @dev Claim rewards for the caller\\n     */\\n    function claimReward() external settled {\\n        require(!hasClaimed[msg.sender], \\\"Already claimed\\\");\\n\\n        uint256 reward = calculateReward(msg.sender);\\n        require(reward > 0, \\\"No rewards to claim\\\");\\n\\n        hasClaimed[msg.sender] = true;\\n\\n        (bool success, ) = msg.sender.call{ value: reward }(\\\"\\\");\\n        require(success, \\\"Failed to send reward\\\");\\n\\n        emit RewardClaimed(msg.sender, reward);\\n    }\\n\\n    /**\\n     * @dev Get user's bet history\\n     * @param user The address to get bet history for\\n     * @return yesAmount Amount bet on yes\\n     * @return noAmount Amount bet on no\\n     * @return totalAmount Total amount bet\\n     */\\n    function getUserBets(\\n        address user\\n    ) external view returns (uint256 yesAmount, uint256 noAmount, uint256 totalAmount) {\\n        yesAmount = yesBets[user];\\n        noAmount = noBets[user];\\n        totalAmount = yesAmount + noAmount;\\n    }\\n\\n    /**\\n     * @dev Get pending claim amount for a user\\n     * @param user The address to check\\n     * @return The amount the user can claim\\n     */\\n    function getPendingClaim(address user) external view returns (uint256) {\\n        if (!isSettled) {\\n            return 0;\\n        }\\n        return calculateReward(user);\\n    }\\n\\n    /**\\n     * @dev Get market statistics\\n     * @return _totalYesBets Total amount bet on yes\\n     * @return _totalNoBets Total amount bet on no\\n     * @return _totalBets Total number of bets\\n     * @return _isSettled Whether market is settled\\n     * @return _winner The winning outcome (if settled)\\n     */\\n    function getMarketStats()\\n        external\\n        view\\n        returns (uint256 _totalYesBets, uint256 _totalNoBets, uint256 _totalBets, bool _isSettled, bool _winner)\\n    {\\n        _totalYesBets = totalYesBets;\\n        _totalNoBets = totalNoBets;\\n        _totalBets = totalBets;\\n        _isSettled = isSettled;\\n        _winner = winner;\\n    }\\n\\n    /**\\n     * @dev Get the question string\\n     * @return The market question\\n     */\\n    function getQuestion() external view returns (string memory) {\\n        return question;\\n    }\\n\\n    /**\\n     * @dev Receive function to accept ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd4760263f7a225c023a5ed4ecf19afa354fe3a37ab080457370184c2e91fa27b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5033608052608051612c42610045600039600081816101fb015281816113d30152818161141701526114df0152612c426000f3fe608060405260043610620001175760003560e01c8063b1283e7711620000a1578063db0f871d116200006c578063db0f871d1462000348578063db2e21bc146200036d578063db9132361462000387578063e991560f14620003ac578063fd69f3c214620003d157600080fd5b8063b1283e771462000292578063b84018d214620002b7578063cc5db95c14620002ee578063da4473d8146200032357600080fd5b80638da5cb5b11620000e25780638da5cb5b14620001e7578063a5e973c3146200021d578063af4b9d3d1462000244578063b0772d0b146200027a57600080fd5b806354888f5514620001245780635da3247a14620001665780636ec934da146200018d5780636f9fb98a14620001d257600080fd5b366200011f57005b600080fd5b3480156200013157600080fd5b50620001496200014336600462001799565b620003e8565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200017357600080fd5b506200017e620004f5565b6040519081526020016200015d565b3480156200019a57600080fd5b50620001c1620001ac3660046200183e565b60016020526000908152604090205460ff1681565b60405190151581526020016200015d565b348015620001df57600080fd5b50476200017e565b348015620001f457600080fd5b50620001497f000000000000000000000000000000000000000000000000000000000000000081565b3480156200022a57600080fd5b506200023562000624565b6040516200015d9190620018a9565b3480156200025157600080fd5b506200026962000263366004620018be565b6200092c565b6040516200015d939291906200192c565b3480156200028757600080fd5b506200023562000ac7565b3480156200029f57600080fd5b5062000149620002b1366004620018be565b62000b2b565b348015620002c457600080fd5b50620002dc620002d63660046200183e565b62000b56565b6040516200015d949392919062001996565b348015620002fb57600080fd5b50620003136200030d3660046200183e565b62000fbb565b6040516200015d929190620019f6565b3480156200033057600080fd5b5062000235620003423660046200183e565b62001317565b3480156200035557600080fd5b50620001496200036736600462001a28565b6200138f565b3480156200037a57600080fd5b5062000385620013c8565b005b3480156200039457600080fd5b5062000385620003a63660046200183e565b620014d4565b348015620003b957600080fd5b506200017e620003cb3660046200183e565b620015a2565b348015620003de57600080fd5b506000546200017e565b6000808233604051620003fb9062001716565b6200040892919062001a55565b604051809103906000f08015801562000425573d6000803e3d6000fd5b5060008054600181810183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0385166001600160a01b0319918216811790925581845260208381526040808620805460ff191686179055338087526002835281872080549687018155875291909520909301805490911682179055915192935083929091907f399415246711dab8a1b129dbd52f5a8f33ccd156f8bbcb481b900f33cfb3677990620004e690889062001a81565b60405180910390a39392505050565b600080805b6000548110156200061e57600160008083815481106200051e576200051e62001a96565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156200060957600080828154811062000563576200056362001a96565b9060005260206000200160009054906101000a90046001600160a01b031690506000816001600160a01b031663ff4cd5b96040518163ffffffff1660e01b815260040160a060405180830381865afa158015620005c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005ea919062001abd565b94505050505080620006065783620006028162001b28565b9450505b50505b80620006158162001b28565b915050620004fa565b50919050565b60606000805b6000548110156200074e57600160008083815481106200064e576200064e62001a96565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156200073957600080828154811062000693576200069362001a96565b9060005260206000200160009054906101000a90046001600160a01b031690506000816001600160a01b031663ff4cd5b96040518163ffffffff1660e01b815260040160a060405180830381865afa158015620006f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200071a919062001abd565b94505050505080620007365783620007328162001b28565b9450505b50505b80620007458162001b28565b9150506200062a565b5060008167ffffffffffffffff8111156200076d576200076d62001724565b60405190808252806020026020018201604052801562000797578160200160208202803683370190505b5090506000805b600054811015620009235760016000808381548110620007c257620007c262001a96565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156200090e57600080828154811062000807576200080762001a96565b9060005260206000200160009054906101000a90046001600160a01b031690506000816001600160a01b031663ff4cd5b96040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000868573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200088e919062001abd565b945050505050806200090b5760008381548110620008b057620008b062001a96565b9060005260206000200160009054906101000a90046001600160a01b0316858581518110620008e357620008e362001a96565b6001600160a01b039092166020928302919091019091015283620009078162001b28565b9450505b50505b806200091a8162001b28565b9150506200079e565b50909392505050565b60008054606090829084106200097f5760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064015b60405180910390fd5b6000848154811062000995576200099562001a96565b60009182526020808320909101546001600160a01b0316808352600190915260409091205490935060ff161562000aad576000839050806001600160a01b031663eff38f926040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000a0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000a34919081019062001b44565b92506000816001600160a01b031663ff4cd5b96040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000a77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9d919062001abd565b15965062000ac095505050505050565b5050604080516020810190915260008082525b9193909250565b6060600080548060200260200160405190810160405280929190818152602001828054801562000b2157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000b02575b5050505050905090565b6000818154811062000b3c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060806060806000805b60005481101562000c8b576001600080838154811062000b845762000b8462001a96565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161562000c7657600080828154811062000bc95762000bc962001a96565b6000918252602082200154604051632d56657d60e01b81526001600160a01b038b81166004830152909116925081908390632d56657d90602401606060405180830381865afa15801562000c21573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c47919062001bbb565b5091509150600082118062000c5c5750600081115b1562000c72578462000c6e8162001b28565b9550505b5050505b8062000c828162001b28565b91505062000b60565b508067ffffffffffffffff81111562000ca85762000ca862001724565b60405190808252806020026020018201604052801562000cd2578160200160208202803683370190505b5094508067ffffffffffffffff81111562000cf15762000cf162001724565b60405190808252806020026020018201604052801562000d1b578160200160208202803683370190505b5093508067ffffffffffffffff81111562000d3a5762000d3a62001724565b60405190808252806020026020018201604052801562000d64578160200160208202803683370190505b5092508067ffffffffffffffff81111562000d835762000d8362001724565b60405190808252806020026020018201604052801562000dad578160200160208202803683370190505b5091506000805b60005481101562000fb1576001600080838154811062000dd85762000dd862001a96565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161562000f9c57600080828154811062000e1d5762000e1d62001a96565b6000918252602082200154604051632d56657d60e01b81526001600160a01b038c811660048301529091169250819081908490632d56657d90602401606060405180830381865afa15801562000e77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e9d919062001bbb565b925092509250600083118062000eb35750600082115b1562000f97576000858154811062000ecf5762000ecf62001a96565b9060005260206000200160009054906101000a90046001600160a01b03168b878151811062000f025762000f0262001a96565b60200260200101906001600160a01b031690816001600160a01b031681525050828a878151811062000f385762000f3862001a96565b6020026020010181815250508189878151811062000f5a5762000f5a62001a96565b6020026020010181815250508088878151811062000f7c5762000f7c62001a96565b60209081029190910101528562000f938162001b28565b9650505b505050505b8062000fa88162001b28565b91505062000db4565b5050509193509193565b6060806000805b600054811015620010d8576001600080838154811062000fe65762000fe662001a96565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615620010c35760008082815481106200102b576200102b62001a96565b6000918252602082200154604051636232df6b60e11b81526001600160a01b0389811660048301529091169250829063c465bed690602401602060405180830381865afa15801562001081573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010a7919062001bea565b90508015620010c05783620010bc8162001b28565b9450505b50505b80620010cf8162001b28565b91505062000fc2565b508067ffffffffffffffff811115620010f557620010f562001724565b6040519080825280602002602001820160405280156200111f578160200160208202803683370190505b5092508067ffffffffffffffff8111156200113e576200113e62001724565b60405190808252806020026020018201604052801562001168578160200160208202803683370190505b5091506000805b6000548110156200130f576001600080838154811062001193576200119362001a96565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615620012fa576000808281548110620011d857620011d862001a96565b6000918252602082200154604051636232df6b60e11b81526001600160a01b038a811660048301529091169250829063c465bed690602401602060405180830381865afa1580156200122e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001254919062001bea565b90508015620012f7576000838154811062001273576200127362001a96565b9060005260206000200160009054906101000a90046001600160a01b0316878581518110620012a657620012a662001a96565b60200260200101906001600160a01b031690816001600160a01b03168152505080868581518110620012dc57620012dc62001a96565b602090810291909101015283620012f38162001b28565b9450505b50505b80620013068162001b28565b9150506200116f565b505050915091565b6001600160a01b0381166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156200138357602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001364575b50505050509050919050565b60026020528160005260406000208181548110620013ac57600080fd5b6000918252602090912001546001600160a01b03169150829050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620014135760405162461bcd60e51b8152600401620009769062001c04565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811462001482576040519150601f19603f3d011682016040523d82523d6000602084013e62001487565b606091505b5050905080620014d15760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640162000976565b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200151f5760405162461bcd60e51b8152600401620009769062001c04565b6001600160a01b03811660009081526001602052604090205460ff16620015815760405162461bcd60e51b815260206004820152601560248201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b604482015260640162000976565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000805b6000548110156200061e5760016000808381548110620015ca57620015ca62001a96565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615620017015760008082815481106200160f576200160f62001a96565b6000918252602082200154604051636232df6b60e11b81526001600160a01b0387811660048301529091169250829063c465bed690602401602060405180830381865afa15801562001665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200168b919062001bea565b90508015620016fe57816001600160a01b031663b88a802f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620016d057600080fd5b505af1925050508015620016e2575060015b620016ef57505062001701565b620016fb818562001c45565b93505b50505b806200170d8162001b28565b915050620015a6565b610fab8062001c6283390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562001766576200176662001724565b604052919050565b600067ffffffffffffffff8211156200178b576200178b62001724565b50601f01601f191660200190565b600060208284031215620017ac57600080fd5b813567ffffffffffffffff811115620017c457600080fd5b8201601f81018413620017d657600080fd5b8035620017ed620017e7826200176e565b6200173a565b8181528560208385010111156200180357600080fd5b81602084016020830137600091810160200191909152949350505050565b80356001600160a01b03811681146200183957600080fd5b919050565b6000602082840312156200185157600080fd5b6200185c8262001821565b9392505050565b600081518084526020808501945080840160005b838110156200189e5781516001600160a01b03168752958201959082019060010162001877565b509495945050505050565b6020815260006200185c602083018462001863565b600060208284031215620018d157600080fd5b5035919050565b60005b83811015620018f5578181015183820152602001620018db565b50506000910152565b6000815180845262001918816020860160208601620018d8565b601f01601f19169290920160200192915050565b6001600160a01b03841681526060602082018190526000906200195290830185620018fe565b90508215156040830152949350505050565b600081518084526020808501945080840160005b838110156200189e5781518752958201959082019060010162001978565b608081526000620019ab608083018762001863565b8281036020840152620019bf818762001964565b90508281036040840152620019d5818662001964565b90508281036060840152620019eb818562001964565b979650505050505050565b60408152600062001a0b604083018562001863565b828103602084015262001a1f818562001964565b95945050505050565b6000806040838503121562001a3c57600080fd5b62001a478362001821565b946020939093013593505050565b60408152600062001a6a6040830185620018fe565b905060018060a01b03831660208301529392505050565b6020815260006200185c6020830184620018fe565b634e487b7160e01b600052603260045260246000fd5b805180151581146200183957600080fd5b600080600080600060a0868803121562001ad657600080fd5b85519450602086015193506040860151925062001af66060870162001aac565b915062001b066080870162001aac565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60006001820162001b3d5762001b3d62001b12565b5060010190565b60006020828403121562001b5757600080fd5b815167ffffffffffffffff81111562001b6f57600080fd5b8201601f8101841362001b8157600080fd5b805162001b92620017e7826200176e565b81815285602083850101111562001ba857600080fd5b62001a1f826020830160208601620018d8565b60008060006060848603121562001bd157600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121562001bfd57600080fd5b5051919050565b60208082526021908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b8082018082111562001c5b5762001c5b62001b12565b9291505056fe60a06040523480156200001157600080fd5b5060405162000fab38038062000fab833981016040819052620000349162000095565b6001600160a01b03811660805260006200004f83826200020c565b50506001805460ff1916905550620002d8565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200009057600080fd5b919050565b60008060408385031215620000a957600080fd5b82516001600160401b0380821115620000c157600080fd5b818501915085601f830112620000d657600080fd5b815181811115620000eb57620000eb62000062565b604051601f8201601f19908116603f0116810190838211818310171562000116576200011662000062565b816040528281526020935088848487010111156200013357600080fd5b600091505b8282101562000157578482018401518183018501529083019062000138565b60008484830101528096505050506200017281860162000078565b925050509250929050565b600181811c908216806200019257607f821691505b602082108103620001b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200020757600081815260208120601f850160051c81016020861015620001e25750805b601f850160051c820191505b818110156200020357828155600101620001ee565b5050505b505050565b81516001600160401b0381111562000228576200022862000062565b62000240816200023984546200017d565b84620001b9565b602080601f8311600181146200027857600084156200025f5750858301515b600019600386901b1c1916600185901b17855562000203565b600085815260208120601f198616915b82811015620002a95788860151825594840194600190910190840162000288565b5085821015620002c85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610cb0620002fb6000396000818161013601526106560152610cb06000f3fe6080604052600436106101185760003560e01c806373b2e80e116100a0578063c465bed611610064578063c465bed61461033b578063d82e39621461035b578063dfbf53ae1461037b578063eff38f921461039a578063ff4cd5b9146103af57600080fd5b806373b2e80e146102935780637620ba30146102c3578063ac427a26146102f0578063b88a802f14610310578063befa1e2f1461032557600080fd5b80633270bb5b116100e75780633270bb5b146101e95780633f9326af146102135780633fad9ae01461022e57806350b3b0c514610250578063566aa60b1461027d57600080fd5b806302d05d3f14610124578063096a3778146101755780632a5968991461018a5780632d56657d146101ae57600080fd5b3661011f57005b600080fd5b34801561013057600080fd5b506101587f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610188610183366004610b3e565b6103fd565b005b34801561019657600080fd5b506101a060025481565b60405190815260200161016c565b3480156101ba57600080fd5b506101ce6101c9366004610b67565b610585565b6040805193845260208401929092529082015260600161016c565b3480156101f557600080fd5b506001546102039060ff1681565b604051901515815260200161016c565b34801561021f57600080fd5b506101a0662386f26fc1000081565b34801561023a57600080fd5b506102436105bd565b60405161016c9190610b90565b34801561025c57600080fd5b506101a061026b366004610b67565b60056020526000908152604090205481565b34801561028957600080fd5b506101a060035481565b34801561029f57600080fd5b506102036102ae366004610b67565b60076020526000908152604090205460ff1681565b3480156102cf57600080fd5b506101a06102de366004610b67565b60066020526000908152604090205481565b3480156102fc57600080fd5b5061018861030b366004610b3e565b61064b565b34801561031c57600080fd5b50610188610774565b34801561033157600080fd5b506101a060045481565b34801561034757600080fd5b506101a0610356366004610b67565b610947565b34801561036757600080fd5b506101a0610376366004610b67565b61096b565b34801561038757600080fd5b5060015461020390610100900460ff1681565b3480156103a657600080fd5b50610243610aac565b3480156103bb57600080fd5b506002546003546004546001546040805194855260208501939093529183015260ff80821615156060840152610100909104161515608082015260a00161016c565b60015460ff16156104515760405162461bcd60e51b815260206004820152601960248201527813585c9ad95d081a5cc8185b1c9958591e481cd95d1d1b1959603a1b60448201526064015b60405180910390fd5b662386f26fc1000034146104a75760405162461bcd60e51b815260206004820152601960248201527f4d757374206265742065786163746c7920302e303120455448000000000000006044820152606401610448565b80156104f05733600090815260056020526040812080543492906104cc908490610bf4565b9250508190555034600260008282546104e59190610bf4565b9091555061052e9050565b336000908152600660205260408120805434929061050f908490610bf4565b9250508190555034600360008282546105289190610bf4565b90915550505b6001600460008282546105419190610bf4565b909155505060408051821515815234602082015233917fe57fa5a543ebcdebf2a7d7102ac913e14454cec006468e43a6916e95bdfcea9e910160405180910390a250565b6001600160a01b038116600090815260056020908152604080832054600690925282205490916105b58284610bf4565b929491935050565b600080546105ca90610c07565b80601f01602080910402602001604051908101604052809291908181526020018280546105f690610c07565b80156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b505050505081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106cf5760405162461bcd60e51b815260206004820152602360248201527f4f6e6c792063726561746f722063616e2063616c6c20746869732066756e637460448201526234b7b760e91b6064820152608401610448565b60015460ff161561071e5760405162461bcd60e51b815260206004820152601960248201527813585c9ad95d081a5cc8185b1c9958591e481cd95d1d1b1959603a1b6044820152606401610448565b600180548215156101000261ffff1990911617811790556040517fdb2a328be8e4e74480b048bb0dbd0dfc5edf85cfbc82d320c173a92d390a1ef29061076990831515815260200190565b60405180910390a150565b60015460ff166107c25760405162461bcd60e51b815260206004820152601960248201527813585c9ad95d081a5cc81b9bdd081cd95d1d1b1959081e595d603a1b6044820152606401610448565b3360009081526007602052604090205460ff16156108145760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610448565b600061081f3361096b565b9050600081116108675760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b6044820152606401610448565b33600081815260076020526040808220805460ff191660011790555190919083908381818185875af1925050503d80600081146108c0576040519150601f19603f3d011682016040523d82523d6000602084013e6108c5565b606091505b505090508061090e5760405162461bcd60e51b815260206004820152601560248201527411985a5b1959081d1bc81cd95b99081c995dd85c99605a1b6044820152606401610448565b60405182815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419060200160405180910390a25050565b60015460009060ff1661095c57506000919050565b6109658261096b565b92915050565b60015460009060ff166109bc5760405162461bcd60e51b815260206004820152601960248201527813585c9ad95d081a5cc81b9bdd081cd95d1d1b1959081e595d603a1b6044820152606401610448565b6001600160a01b03821660009081526007602052604090205460ff16156109e557506000919050565b600154600090610100900460ff16610a15576001600160a01b038316600090815260066020526040902054610a2f565b6001600160a01b0383166000908152600560205260409020545b905080600003610a425750600092915050565b600154600090610100900460ff16610a5c57600354610a60565b6002545b9050600060018054906101000a900460ff16610a7e57600254610a82565b6003545b905081610a8f8285610c41565b610a999190610c58565b610aa39084610bf4565b95945050505050565b606060008054610abb90610c07565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae790610c07565b8015610b345780601f10610b0957610100808354040283529160200191610b34565b820191906000526020600020905b815481529060010190602001808311610b1757829003601f168201915b5050505050905090565b600060208284031215610b5057600080fd5b81358015158114610b6057600080fd5b9392505050565b600060208284031215610b7957600080fd5b81356001600160a01b0381168114610b6057600080fd5b600060208083528351808285015260005b81811015610bbd57858101830151858201604001528201610ba1565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561096557610965610bde565b600181811c90821680610c1b57607f821691505b602082108103610c3b57634e487b7160e01b600052602260045260246000fd5b50919050565b808202811582820484141761096557610965610bde565b600082610c7557634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220161ff99948c7f0454b5d4e36fc36418b5dd203d003ea9e1d51c9f8e335779bfd64736f6c63430008140033a2646970667358221220fb19ef01b521bb7ae7792f4a2558501dad5892fd418ebdc449bf5c6be0301b0164736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "BetNad",
    "details": "Factory contract for creating and managing betting markets",
    "kind": "dev",
    "methods": {
      "claimAllRewards(address)": {
        "details": "Claim all pending rewards for a user across all markets",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "totalClaimed": "Total amount claimed across all markets"
        }
      },
      "createMarket(string)": {
        "details": "Create a new betting market",
        "params": {
          "question": "The question for the betting market"
        },
        "returns": {
          "_0": "The address of the created market"
        }
      },
      "emergencyWithdraw()": {
        "details": "Emergency withdraw function (only owner)"
      },
      "getActiveMarketCount()": {
        "details": "Get active market count",
        "returns": {
          "_0": "Number of active (non-settled) markets"
        }
      },
      "getActiveMarkets()": {
        "details": "Get all active (non-settled) markets",
        "returns": {
          "_0": "Array of active market addresses"
        }
      },
      "getAllMarkets()": {
        "details": "Get all markets (active and settled)",
        "returns": {
          "_0": "Array of all market addresses"
        }
      },
      "getContractBalance()": {
        "details": "Get contract balance (for emergency purposes)",
        "returns": {
          "_0": "The balance of the factory contract"
        }
      },
      "getMarketByIndex(uint256)": {
        "details": "Get market details by index",
        "params": {
          "index": "The index of the market in the markets array"
        },
        "returns": {
          "isActive": "Whether the market is active (not settled)",
          "marketAddress": "The address of the market",
          "question": "The question of the market"
        }
      },
      "getMarketCount()": {
        "details": "Get market count",
        "returns": {
          "_0": "Total number of markets created"
        }
      },
      "getUserBetHistory(address)": {
        "details": "Get user's bet history across all markets",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "marketAddresses": "Array of market addresses where user has bets",
          "noAmounts": "Array of amounts bet on no for each market",
          "totalAmounts": "Array of total amounts bet for each market",
          "yesAmounts": "Array of amounts bet on yes for each market"
        }
      },
      "getUserMarkets(address)": {
        "details": "Get all markets created by a specific user",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "Array of market addresses created by the user"
        }
      },
      "getUserPendingClaims(address)": {
        "details": "Get user's pending claims across all markets",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "claimAmounts": "Array of claimable amounts for each market",
          "marketAddresses": "Array of market addresses where user has pending claims"
        }
      },
      "removeMarket(address)": {
        "details": "Emergency function to remove a market (only owner)",
        "params": {
          "marketAddress": "The address of the market to remove"
        }
      }
    },
    "title": "BetFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9,
        "contract": "contracts/BetFactory.sol:BetFactory",
        "label": "markets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13,
        "contract": "contracts/BetFactory.sol:BetFactory",
        "label": "isMarket",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18,
        "contract": "contracts/BetFactory.sol:BetFactory",
        "label": "userMarkets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}