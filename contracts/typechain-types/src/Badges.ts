/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Badges {
  export type BadgeInfoStruct = {
    name: string;
    description: string;
    imageUri: string;
    rarity: BigNumberish;
    exists: boolean;
    totalMinted: BigNumberish;
    maxSupply: BigNumberish;
  };

  export type BadgeInfoStructOutput = [
    name: string,
    description: string,
    imageUri: string,
    rarity: bigint,
    exists: boolean,
    totalMinted: bigint,
    maxSupply: bigint
  ] & {
    name: string;
    description: string;
    imageUri: string;
    rarity: bigint;
    exists: boolean;
    totalMinted: bigint;
    maxSupply: bigint;
  };
}

export interface BadgesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CTF_MASTER_BADGE"
      | "FIRST_WIN_BADGE"
      | "FIVE_WIN_STREAK_BADGE"
      | "GAS_OPTIMIZER_BADGE"
      | "HUNDRED_MATCHES_BADGE"
      | "SPEED_DEMON_BADGE"
      | "TEN_WIN_STREAK_BADGE"
      | "addMinter"
      | "badges"
      | "balanceOf"
      | "balanceOfBatch"
      | "createCustomBadge"
      | "getBadgeInfo"
      | "getPlayerBadges"
      | "hasBadge"
      | "isApprovedForAll"
      | "mintBadge"
      | "mintBadgesBatch"
      | "minters"
      | "owner"
      | "pause"
      | "paused"
      | "playerHasBadge"
      | "removeMinter"
      | "renounceOwnership"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setURI"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
      | "uri"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "BadgeCreated"
      | "BadgeMinted"
      | "MinterAdded"
      | "MinterRemoved"
      | "OwnershipTransferred"
      | "Paused"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CTF_MASTER_BADGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIRST_WIN_BADGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIVE_WIN_STREAK_BADGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAS_OPTIMIZER_BADGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HUNDRED_MATCHES_BADGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPEED_DEMON_BADGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEN_WIN_STREAK_BADGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "badges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createCustomBadge",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerBadges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBadge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBadge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBadgesBatch",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "minters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerHasBadge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "CTF_MASTER_BADGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIRST_WIN_BADGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIVE_WIN_STREAK_BADGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAS_OPTIMIZER_BADGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HUNDRED_MATCHES_BADGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPEED_DEMON_BADGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEN_WIN_STREAK_BADGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "badges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCustomBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerBadges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintBadgesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerHasBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeCreatedEvent {
  export type InputTuple = [
    badgeId: BigNumberish,
    name: string,
    rarity: BigNumberish,
    maxSupply: BigNumberish
  ];
  export type OutputTuple = [
    badgeId: bigint,
    name: string,
    rarity: bigint,
    maxSupply: bigint
  ];
  export interface OutputObject {
    badgeId: bigint;
    name: string;
    rarity: bigint;
    maxSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeMintedEvent {
  export type InputTuple = [
    player: AddressLike,
    badgeId: BigNumberish,
    badgeName: string
  ];
  export type OutputTuple = [
    player: string,
    badgeId: bigint,
    badgeName: string
  ];
  export interface OutputObject {
    player: string;
    badgeId: bigint;
    badgeName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterAddedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterRemovedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Badges extends BaseContract {
  connect(runner?: ContractRunner | null): Badges;
  waitForDeployment(): Promise<this>;

  interface: BadgesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CTF_MASTER_BADGE: TypedContractMethod<[], [bigint], "view">;

  FIRST_WIN_BADGE: TypedContractMethod<[], [bigint], "view">;

  FIVE_WIN_STREAK_BADGE: TypedContractMethod<[], [bigint], "view">;

  GAS_OPTIMIZER_BADGE: TypedContractMethod<[], [bigint], "view">;

  HUNDRED_MATCHES_BADGE: TypedContractMethod<[], [bigint], "view">;

  SPEED_DEMON_BADGE: TypedContractMethod<[], [bigint], "view">;

  TEN_WIN_STREAK_BADGE: TypedContractMethod<[], [bigint], "view">;

  addMinter: TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;

  badges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint, bigint] & {
        name: string;
        description: string;
        imageUri: string;
        rarity: bigint;
        exists: boolean;
        totalMinted: bigint;
        maxSupply: bigint;
      }
    ],
    "view"
  >;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  createCustomBadge: TypedContractMethod<
    [
      name: string,
      description: string,
      imageUri: string,
      rarity: BigNumberish,
      maxSupply: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getBadgeInfo: TypedContractMethod<
    [badgeId: BigNumberish],
    [Badges.BadgeInfoStructOutput],
    "view"
  >;

  getPlayerBadges: TypedContractMethod<
    [player: AddressLike],
    [bigint[]],
    "view"
  >;

  hasBadge: TypedContractMethod<
    [player: AddressLike, badgeId: BigNumberish],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mintBadge: TypedContractMethod<
    [player: AddressLike, badgeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintBadgesBatch: TypedContractMethod<
    [player: AddressLike, badgeIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  minters: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  playerHasBadge: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  removeMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "view"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setURI: TypedContractMethod<[newUri: string], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  uri: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CTF_MASTER_BADGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIRST_WIN_BADGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FIVE_WIN_STREAK_BADGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAS_OPTIMIZER_BADGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HUNDRED_MATCHES_BADGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SPEED_DEMON_BADGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TEN_WIN_STREAK_BADGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "badges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint, bigint] & {
        name: string;
        description: string;
        imageUri: string;
        rarity: bigint;
        exists: boolean;
        totalMinted: bigint;
        maxSupply: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCustomBadge"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      imageUri: string,
      rarity: BigNumberish,
      maxSupply: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBadgeInfo"
  ): TypedContractMethod<
    [badgeId: BigNumberish],
    [Badges.BadgeInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerBadges"
  ): TypedContractMethod<[player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasBadge"
  ): TypedContractMethod<
    [player: AddressLike, badgeId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintBadge"
  ): TypedContractMethod<
    [player: AddressLike, badgeId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintBadgesBatch"
  ): TypedContractMethod<
    [player: AddressLike, badgeIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerHasBadge"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setURI"
  ): TypedContractMethod<[newUri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BadgeCreated"
  ): TypedContractEvent<
    BadgeCreatedEvent.InputTuple,
    BadgeCreatedEvent.OutputTuple,
    BadgeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BadgeMinted"
  ): TypedContractEvent<
    BadgeMintedEvent.InputTuple,
    BadgeMintedEvent.OutputTuple,
    BadgeMintedEvent.OutputObject
  >;
  getEvent(
    key: "MinterAdded"
  ): TypedContractEvent<
    MinterAddedEvent.InputTuple,
    MinterAddedEvent.OutputTuple,
    MinterAddedEvent.OutputObject
  >;
  getEvent(
    key: "MinterRemoved"
  ): TypedContractEvent<
    MinterRemovedEvent.InputTuple,
    MinterRemovedEvent.OutputTuple,
    MinterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BadgeCreated(uint256,string,uint8,uint256)": TypedContractEvent<
      BadgeCreatedEvent.InputTuple,
      BadgeCreatedEvent.OutputTuple,
      BadgeCreatedEvent.OutputObject
    >;
    BadgeCreated: TypedContractEvent<
      BadgeCreatedEvent.InputTuple,
      BadgeCreatedEvent.OutputTuple,
      BadgeCreatedEvent.OutputObject
    >;

    "BadgeMinted(address,uint256,string)": TypedContractEvent<
      BadgeMintedEvent.InputTuple,
      BadgeMintedEvent.OutputTuple,
      BadgeMintedEvent.OutputObject
    >;
    BadgeMinted: TypedContractEvent<
      BadgeMintedEvent.InputTuple,
      BadgeMintedEvent.OutputTuple,
      BadgeMintedEvent.OutputObject
    >;

    "MinterAdded(address)": TypedContractEvent<
      MinterAddedEvent.InputTuple,
      MinterAddedEvent.OutputTuple,
      MinterAddedEvent.OutputObject
    >;
    MinterAdded: TypedContractEvent<
      MinterAddedEvent.InputTuple,
      MinterAddedEvent.OutputTuple,
      MinterAddedEvent.OutputObject
    >;

    "MinterRemoved(address)": TypedContractEvent<
      MinterRemovedEvent.InputTuple,
      MinterRemovedEvent.OutputTuple,
      MinterRemovedEvent.OutputObject
    >;
    MinterRemoved: TypedContractEvent<
      MinterRemovedEvent.InputTuple,
      MinterRemovedEvent.OutputTuple,
      MinterRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
